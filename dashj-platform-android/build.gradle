plugins {
    id 'com.android.library'
    //id "org.mozilla.rust-android-gradle.rust-android" version "0.9.3"
    id 'maven-publish'
}

android {
    namespace "org.dashj.platform"
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 32

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/*.so'
    }

    ndkVersion = "23.1.7779620"
    //ndkVersion = "21.4.7075529"

    // Define a map from target architecture to NDK sysroot path
    def ndkSysroots = [
            'armv7-linux-androideabi': android.ndkDirectory.getPath() + '/toolchains/llvm/prebuilt/darwin-x86_64/sysroot',
            'aarch64-linux-android': android.ndkDirectory.getPath() + 'toolchains/llvm/prebuilt/darwin-x86_64/sysroot',
            // Add other architectures as needed
    ]
}

//cargo {
//    module  = "./src/main/rust"       // Or whatever directory contains your Cargo.toml
//    libname = "rssdkbindings"          // Or whatever matches Cargo.toml's [package] name.
//    targets = ["arm", "arm64", "x86", "x86_64"]  // See bellow for a longer list of options
//    prebuiltToolchains = true
//    profile = 'release'
//    verbose = false
//    rustupChannel = "nightly"
//    targetDirectory = './build/rust'
//    targetIncludes = ['librssdkbindings.so']
//    extraCargoBuildArguments = ['-Zbuild-std']
//}

//task buildRustRelease(type: Exec) {
//    workingDir 'src/main/rust' // Adjust this to the path of your Rust project relative to your Android project
//    commandLine 'cargo', '+nightly', 'build', '--release', '--target=armv7-linux-androideabi', '-Zbuild-std'
//    environment "CARGO_TARGET_DIR", "target"
//    environment "CC", android.ndkDirectory.getPath() + "/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi31-clang"
//    environment "AR", android.ndkDirectory.getPath() + "/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi31-ar"
//    environment "CFLAGS", "--sysroot=" +android.ndkDirectory.getPath() + '/toolchains/llvm/prebuilt/darwin-x86_64/sysroot'
//    // Set additional environment variables as needed
//}

task buildRustRelease() {
    doLast {
        String outputPath = "$projectDir/src/main/jniLibs" // Adjust the output path as necessary
        def abis = [
                "armv7-linux-androideabi",
                "aarch64-linux-android",
                "i686-linux-android",
                "x86_64-linux-android"
        ]

        abis.each { abi ->
            exec {
                workingDir 'src/main/rust' // Adjust to the path of your Rust project relative to your Android project
                environment "CARGO_TARGET_DIR", "target"
                //environment "CARGO_FEATURE_STD", 1 // this is to trick indexmap, among others
                commandLine 'cargo', '+nightly', 'ndk', '-t', abi, '-o', outputPath, '--platform', '24', 'build', '--release', '-Zbuild-std'
                // Uncomment the next line if you need verbose output for debugging
                // commandLine 'cargo', '+nightly', 'ndk', '-t', abi, '-o', outputPath, '--platform', '24', 'build', '--release', '-Zbuild-std', '-vv'
            }
        }
    }
}


//tasks.whenTaskAdded { task ->
//    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
//        task.dependsOn 'cargoBuild'
//    }
//}

//preBuild.dependsOn "cargoBuild"

task copyArm8Library(type: Copy) {
    from 'src/main/rust/target/aarch64-linux-android/release/librssdkbindings.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/arm64-v8a/libc++_shared.so'
    into 'src/main/jniLibs/arm64-v8a'
}

task copyArm7Library(type: Copy) {
    from './src/main/rust/target/armv7-linux-androideabi/release/librssdkbindings.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++_shared.so'
    into './src/main/jniLibs/armeabi-v7a'
}

task copyX86Library(type: Copy) {
    from 'src/main/rust/target/i686-linux-android/release/librssdkbindings.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/x86/libc++_shared.so'
    into 'src/main/jniLibs/x86'
}

task copyX64Library(type: Copy) {
    from './src/main/rust/target/x86_64-linux-android/release/librssdkbindings.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/x86_64/libc++_shared.so'
    into './src/main/jniLibs/x86_64'
}

//preBuild.dependsOn 'copyArm8Library'
//preBuild.dependsOn 'copyArm7Library'
//preBuild.dependsOn 'copyX86Library'
//preBuild.dependsOn 'copyX64Library'

dependencies {
    //implementation 'org.dashj.android:dashj-merk:0.20-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
group 'org.dashj.android'
version '0.22-SNAPSHOT'

//task sourcesJar(type: Jar) {
//    classifier 'sources'
//    from android.sourceSets.main.java.srcDirs
//}

assemble.dependsOn(publishToMavenLocal)

//test {
//   useJUnitPlatform()
//}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives javadocJar
//    //archives sourcesJar
//}