# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod types { pub mod rs_sdk { } pub mod platform_value { # [doc = "FFI-representation of the [`platform_value::Hash256`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_Hash256 (* mut [u8 ; 32]) ; impl ferment_interfaces :: FFIConversion < platform_value :: Hash256 > for platform_value_Hash256 { unsafe fn ffi_from_const (ffi : * const platform_value_Hash256) -> platform_value :: Hash256 { let ffi_ref = & * ffi ; * ffi_ref . 0 } unsafe fn ffi_to_const (obj : platform_value :: Hash256) -> * const platform_value_Hash256 { ferment_interfaces :: boxed (platform_value_Hash256 (ferment_interfaces :: boxed (obj))) } unsafe fn destroy (ffi : * mut platform_value_Hash256) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_Hash256 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_ctor (o_0 : * mut [u8 ; 32]) -> * mut platform_value_Hash256 { ferment_interfaces :: boxed (platform_value_Hash256 (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_destroy (ffi : * mut platform_value_Hash256) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_get_0 (obj : * const platform_value_Hash256) -> * mut [u8 ; 32] { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_Hash256_set_0 (obj : * mut platform_value_Hash256 , value : * mut [u8 ; 32]) { (* obj) . 0 = value ; } pub mod types { pub mod identifier { # [doc = "FFI-representation of the [`platform_value::types::identifier::IdentifierBytes32`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_IdentifierBytes32 (* mut [u8 ; 32]) ; impl ferment_interfaces :: FFIConversion < platform_value :: types :: identifier :: IdentifierBytes32 > for platform_value_types_identifier_IdentifierBytes32 { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_IdentifierBytes32) -> platform_value :: types :: identifier :: IdentifierBytes32 { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: IdentifierBytes32 (* ffi_ref . 0) } unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: IdentifierBytes32) -> * const platform_value_types_identifier_IdentifierBytes32 { ferment_interfaces :: boxed (platform_value_types_identifier_IdentifierBytes32 (ferment_interfaces :: boxed (obj . 0))) } unsafe fn destroy (ffi : * mut platform_value_types_identifier_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_identifier_IdentifierBytes32 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_ctor (o_0 : * mut [u8 ; 32]) -> * mut platform_value_types_identifier_IdentifierBytes32 { ferment_interfaces :: boxed (platform_value_types_identifier_IdentifierBytes32 (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_destroy (ffi : * mut platform_value_types_identifier_IdentifierBytes32) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_get_0 (obj : * const platform_value_types_identifier_IdentifierBytes32) -> * mut [u8 ; 32] { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_IdentifierBytes32_set_0 (obj : * mut platform_value_types_identifier_IdentifierBytes32 , value : * mut [u8 ; 32]) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`platform_value::types::identifier::Identifier`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_identifier_Identifier (* mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) ; impl ferment_interfaces :: FFIConversion < platform_value :: types :: identifier :: Identifier > for platform_value_types_identifier_Identifier { unsafe fn ffi_from_const (ffi : * const platform_value_types_identifier_Identifier) -> platform_value :: types :: identifier :: Identifier { let ffi_ref = & * ffi ; platform_value :: types :: identifier :: Identifier (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : platform_value :: types :: identifier :: Identifier) -> * const platform_value_types_identifier_Identifier { ferment_interfaces :: boxed (platform_value_types_identifier_Identifier (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut platform_value_types_identifier_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_identifier_Identifier { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_ctor (o_0 : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) -> * mut platform_value_types_identifier_Identifier { ferment_interfaces :: boxed (platform_value_types_identifier_Identifier (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_destroy (ffi : * mut platform_value_types_identifier_Identifier) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_get_0 (obj : * const platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32 { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_identifier_Identifier_set_0 (obj : * mut platform_value_types_identifier_Identifier , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_IdentifierBytes32) { (* obj) . 0 = value ; } } pub mod binary_data { # [doc = "FFI-representation of the [`platform_value::types::binary_data::BinaryData`]"] # [repr (C)] # [derive (Clone)] pub struct platform_value_types_binary_data_BinaryData (* mut crate :: fermented :: generics :: Vec_u8) ; impl ferment_interfaces :: FFIConversion < platform_value :: types :: binary_data :: BinaryData > for platform_value_types_binary_data_BinaryData { unsafe fn ffi_from_const (ffi : * const platform_value_types_binary_data_BinaryData) -> platform_value :: types :: binary_data :: BinaryData { let ffi_ref = & * ffi ; platform_value :: types :: binary_data :: BinaryData (ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0)) } unsafe fn ffi_to_const (obj : platform_value :: types :: binary_data :: BinaryData) -> * const platform_value_types_binary_data_BinaryData { ferment_interfaces :: boxed (platform_value_types_binary_data_BinaryData (ferment_interfaces :: FFIConversion :: ffi_to (obj . 0))) } unsafe fn destroy (ffi : * mut platform_value_types_binary_data_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for platform_value_types_binary_data_BinaryData { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_ctor (o_0 : * mut crate :: fermented :: generics :: Vec_u8) -> * mut platform_value_types_binary_data_BinaryData { ferment_interfaces :: boxed (platform_value_types_binary_data_BinaryData (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_destroy (ffi : * mut platform_value_types_binary_data_BinaryData) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_get_0 (obj : * const platform_value_types_binary_data_BinaryData) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_value_types_binary_data_BinaryData_set_0 (obj : * mut platform_value_types_binary_data_BinaryData , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . 0 = value ; } } } } pub mod platform_mobile { pub mod fetch_identity { # [doc = "FFI-representation of the [`fetch_identity3`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_fetch_identity_fetch_identity3 (identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: generics :: Result_ok_dpp_identity_identity_Identity_err_String { let obj = platform_mobile :: fetch_identity :: fetch_identity3 (ferment_interfaces :: FFIConversion :: ffi_from (identifier)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`fetch_identity2`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_fetch_identity_fetch_identity2 (identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { let obj = platform_mobile :: fetch_identity :: fetch_identity2 (ferment_interfaces :: FFIConversion :: ffi_from (identifier)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`get_document`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_fetch_identity_get_document () -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { let obj = platform_mobile :: fetch_identity :: get_document () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`fetch_identity`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_fetch_identity_fetch_identity (identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { let obj = platform_mobile :: fetch_identity :: fetch_identity (ferment_interfaces :: FFIConversion :: ffi_from (identifier)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } } # [doc = "FFI-representation of the [`get_binary_data2`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_get_binary_data2 () -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { let obj = platform_mobile :: get_binary_data2 () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } pub mod identity { # [doc = "FFI-representation of the [`IdentityPublicKey_clone`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_IdentityPublicKey_clone (identity_public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey { let obj = platform_mobile :: identity :: IdentityPublicKey_clone (& ferment_interfaces :: FFIConversion :: ffi_from (identity_public_key)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`IdentityPublicKeyV0_clone`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_IdentityPublicKeyV0_clone (identity_public_key : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { let obj = platform_mobile :: identity :: IdentityPublicKeyV0_clone (& ferment_interfaces :: FFIConversion :: ffi_from (identity_public_key)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`IdentityV0_clone`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_IdentityV0_clone (identity : * mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0 { let obj = platform_mobile :: identity :: IdentityV0_clone (& ferment_interfaces :: FFIConversion :: ffi_from (identity)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`get_identity2`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_get_identity2 (identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { let obj = platform_mobile :: identity :: get_identity2 (ferment_interfaces :: FFIConversion :: ffi_from (identifier)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_clone`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_clone (public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { let obj = platform_mobile :: identity :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_clone (ferment_interfaces :: FFIConversion :: ffi_from (public_keys)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`create_basic_identity`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_create_basic_identity (id : * mut [u8 ; 32]) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { let obj = platform_mobile :: identity :: create_basic_identity (* id) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`get_identity_contract_bounds`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_get_identity_contract_bounds (identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , contract_identifier : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { let obj = platform_mobile :: identity :: get_identity_contract_bounds (ferment_interfaces :: FFIConversion :: ffi_from (identifier) , ferment_interfaces :: FFIConversion :: ffi_from_opt (contract_identifier)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } # [doc = "FFI-representation of the [`Identity_clone`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_identity_Identity_clone (identity : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity) -> * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity { let obj = platform_mobile :: identity :: Identity_clone (& ferment_interfaces :: FFIConversion :: ffi_from (identity)) ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } } # [doc = "FFI-representation of the [`get_binary_data`]"] # [doc = r" # Safety"] # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn platform_mobile_get_binary_data () -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { let obj = platform_mobile :: get_binary_data () ; ferment_interfaces :: FFIConversion :: ffi_to (obj) } } pub mod dpp { pub mod prelude { # [doc = "FFI-representation of the [`dpp::prelude::Revision`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_prelude_Revision (u64) ; impl ferment_interfaces :: FFIConversion < dpp :: prelude :: Revision > for dpp_prelude_Revision { unsafe fn ffi_from_const (ffi : * const dpp_prelude_Revision) -> dpp :: prelude :: Revision { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: prelude :: Revision) -> * const dpp_prelude_Revision { ferment_interfaces :: boxed (dpp_prelude_Revision (obj)) } unsafe fn destroy (ffi : * mut dpp_prelude_Revision) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_prelude_Revision { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_ctor (o_0 : u64) -> * mut dpp_prelude_Revision { ferment_interfaces :: boxed (dpp_prelude_Revision (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_destroy (ffi : * mut dpp_prelude_Revision) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_get_0 (obj : * const dpp_prelude_Revision) -> u64 { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_prelude_Revision_set_0 (obj : * mut dpp_prelude_Revision , value : u64) { (* obj) . 0 = value ; } } pub mod identity { pub mod v0 { # [doc = "FFI-representation of the [`dpp::identity::v0::IdentityV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_v0_IdentityV0 { pub id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , pub public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , pub balance : u64 , pub revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision } impl ferment_interfaces :: FFIConversion < dpp :: identity :: v0 :: IdentityV0 > for dpp_identity_v0_IdentityV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_v0_IdentityV0) -> dpp :: identity :: v0 :: IdentityV0 { let ffi_ref = & * ffi ; dpp :: identity :: v0 :: IdentityV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , public_keys : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . public_keys) , balance : ffi_ref . balance , revision : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . revision) } } unsafe fn ffi_to_const (obj : dpp :: identity :: v0 :: IdentityV0) -> * const dpp_identity_v0_IdentityV0 { ferment_interfaces :: boxed (dpp_identity_v0_IdentityV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , public_keys : ferment_interfaces :: FFIConversion :: ffi_to (obj . public_keys) , balance : obj . balance , revision : ferment_interfaces :: FFIConversion :: ffi_to (obj . revision) }) } unsafe fn destroy (ffi : * mut dpp_identity_v0_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_v0_IdentityV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . public_keys) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . revision) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , public_keys : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey , balance : u64 , revision : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) -> * mut dpp_identity_v0_IdentityV0 { ferment_interfaces :: boxed (dpp_identity_v0_IdentityV0 { id , public_keys , balance , revision }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_destroy (ffi : * mut dpp_identity_v0_IdentityV0) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_id (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier { (* obj) . id } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_public_keys (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { (* obj) . public_keys } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_balance (obj : * const dpp_identity_v0_IdentityV0) -> u64 { (* obj) . balance } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_get_revision (obj : * const dpp_identity_v0_IdentityV0) -> * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision { (* obj) . revision } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_id (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) { (* obj) . id = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_public_keys (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: generics :: std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { (* obj) . public_keys = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_balance (obj : * mut dpp_identity_v0_IdentityV0 , value : u64) { (* obj) . balance = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_v0_IdentityV0_set_revision (obj : * mut dpp_identity_v0_IdentityV0 , value : * mut crate :: fermented :: types :: dpp :: prelude :: dpp_prelude_Revision) { (* obj) . revision = value ; } } pub mod identity { # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp::identity::identity::Identity`]\"`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_Identity { V0 (* mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity :: Identity > for dpp_identity_identity_Identity { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_Identity) -> dpp :: identity :: identity :: Identity { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_Identity :: V0 (o_0) => dpp :: identity :: identity :: Identity :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity :: Identity) -> * const dpp_identity_identity_Identity { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity :: Identity :: V0 (o_0) => dpp_identity_identity_Identity :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_Identity { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_Identity :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: v0 :: dpp_identity_v0_IdentityV0) -> * mut dpp_identity_identity_Identity { ferment_interfaces :: boxed (dpp_identity_identity_Identity :: V0 (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_Identity_destroy (ffi : * mut dpp_identity_identity_Identity) { ferment_interfaces :: unbox_any (ffi) ; } } pub mod identity_public_key { pub mod purpose { # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp::identity::identity_public_key::purpose::Purpose`]\"`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_purpose_Purpose { AUTHENTICATION = 0 , ENCRYPTION = 1 , DECRYPTION = 2 , TRANSFER = 3 , SYSTEM = 4 , VOTING = 5 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: purpose :: Purpose > for dpp_identity_identity_public_key_purpose_Purpose { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_purpose_Purpose) -> dpp :: identity :: identity_public_key :: purpose :: Purpose { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION , dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER => dpp :: identity :: identity_public_key :: purpose :: Purpose :: TRANSFER , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: purpose :: Purpose) -> * const dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: purpose :: Purpose :: AUTHENTICATION => dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: ENCRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: DECRYPTION => dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION , dpp :: identity :: identity_public_key :: purpose :: Purpose :: TRANSFER => dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER , dpp :: identity :: identity_public_key :: purpose :: Purpose :: SYSTEM => dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM , dpp :: identity :: identity_public_key :: purpose :: Purpose :: VOTING => dpp_identity_identity_public_key_purpose_Purpose :: VOTING }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_purpose_Purpose) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_purpose_Purpose { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION => { } , dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION => { } , dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER => { } , dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM => { } , dpp_identity_identity_public_key_purpose_Purpose :: VOTING => { } } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_AUTHENTICATION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: AUTHENTICATION) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_ENCRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: ENCRYPTION) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_DECRYPTION_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: DECRYPTION) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_TRANSFER_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: TRANSFER) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_SYSTEM_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: SYSTEM) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_VOTING_ctor () -> * mut dpp_identity_identity_public_key_purpose_Purpose { ferment_interfaces :: boxed (dpp_identity_identity_public_key_purpose_Purpose :: VOTING) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_purpose_Purpose_destroy (ffi : * mut dpp_identity_identity_public_key_purpose_Purpose) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp::identity::identity_public_key::IdentityPublicKey`]\"`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_IdentityPublicKey { V0 (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: IdentityPublicKey > for dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_IdentityPublicKey) -> dpp :: identity :: identity_public_key :: IdentityPublicKey { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversion :: ffi_from (* o_0)) } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: IdentityPublicKey) -> * const dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: IdentityPublicKey :: V0 (o_0) => dpp_identity_identity_public_key_IdentityPublicKey :: V0 (ferment_interfaces :: FFIConversion :: ffi_to (o_0)) }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0) => { ferment_interfaces :: unbox_any (* o_0) ; } } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_V0_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: v0 :: dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (dpp_identity_identity_public_key_IdentityPublicKey :: V0 (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_IdentityPublicKey_destroy (ffi : * mut dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } pub mod contract_bounds { # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp::identity::identity_public_key::contract_bounds::ContractBounds`]\"`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_contract_bounds_ContractBounds { SingleContract { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier } , SingleContractDocumentType { id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char } } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds > for dpp_identity_identity_public_key_contract_bounds_ContractBounds { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_contract_bounds_ContractBounds) -> dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversion :: ffi_from (* id) } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversion :: ffi_from (* id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_from (* document_type_name) } } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds) -> * const dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContract { id } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id : ferment_interfaces :: FFIConversion :: ffi_to (id) } , dpp :: identity :: identity_public_key :: contract_bounds :: ContractBounds :: SingleContractDocumentType { id , document_type_name } => dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id : ferment_interfaces :: FFIConversion :: ffi_to (id) , document_type_name : ferment_interfaces :: FFIConversion :: ffi_to (document_type_name) } }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_contract_bounds_ContractBounds { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id } => { ferment_interfaces :: unbox_any (* id) ; } , dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name } => { ferment_interfaces :: unbox_any (* id) ; ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (* document_type_name) } } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContract_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContract { id }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_SingleContractDocumentType_ctor (id : * mut crate :: fermented :: types :: platform_value :: types :: identifier :: platform_value_types_identifier_Identifier , document_type_name : * mut std :: os :: raw :: c_char) -> * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds { ferment_interfaces :: boxed (dpp_identity_identity_public_key_contract_bounds_ContractBounds :: SingleContractDocumentType { id , document_type_name }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_contract_bounds_ContractBounds_destroy (ffi : * mut dpp_identity_identity_public_key_contract_bounds_ContractBounds) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::KeyID`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyID (u32) ; impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: KeyID > for dpp_identity_identity_public_key_KeyID { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyID) -> dpp :: identity :: identity_public_key :: KeyID { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyID) -> * const dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyID (obj)) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_KeyID { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_ctor (o_0 : u32) -> * mut dpp_identity_identity_public_key_KeyID { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyID (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_destroy (ffi : * mut dpp_identity_identity_public_key_KeyID) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_get_0 (obj : * const dpp_identity_identity_public_key_KeyID) -> u32 { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyID_set_0 (obj : * mut dpp_identity_identity_public_key_KeyID , value : u32) { (* obj) . 0 = value ; } pub mod security_level { # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp::identity::identity_public_key::security_level::SecurityLevel`]\"`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_security_level_SecurityLevel { MASTER = 0 , CRITICAL = 1 , HIGH = 2 , MEDIUM = 3 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: security_level :: SecurityLevel > for dpp_identity_identity_public_key_security_level_SecurityLevel { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_security_level_SecurityLevel) -> dpp :: identity :: identity_public_key :: security_level :: SecurityLevel { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: security_level :: SecurityLevel) -> * const dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MASTER => dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: CRITICAL => dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: HIGH => dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH , dpp :: identity :: identity_public_key :: security_level :: SecurityLevel :: MEDIUM => dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_security_level_SecurityLevel { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH => { } , dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM => { } } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MASTER_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MASTER) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_CRITICAL_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: CRITICAL) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_HIGH_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: HIGH) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_MEDIUM_ctor () -> * mut dpp_identity_identity_public_key_security_level_SecurityLevel { ferment_interfaces :: boxed (dpp_identity_identity_public_key_security_level_SecurityLevel :: MEDIUM) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_security_level_SecurityLevel_destroy (ffi : * mut dpp_identity_identity_public_key_security_level_SecurityLevel) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::KeyCount`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_KeyCount (* mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) ; impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: KeyCount > for dpp_identity_identity_public_key_KeyCount { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_KeyCount) -> dpp :: identity :: identity_public_key :: KeyCount { let ffi_ref = & * ffi ; ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . 0) } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: KeyCount) -> * const dpp_identity_identity_public_key_KeyCount { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyCount (ferment_interfaces :: FFIConversion :: ffi_to (obj))) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_KeyCount) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_KeyCount { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . 0) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_ctor (o_0 : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) -> * mut dpp_identity_identity_public_key_KeyCount { ferment_interfaces :: boxed (dpp_identity_identity_public_key_KeyCount (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_destroy (ffi : * mut dpp_identity_identity_public_key_KeyCount) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_get_0 (obj : * const dpp_identity_identity_public_key_KeyCount) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_KeyCount_set_0 (obj : * mut dpp_identity_identity_public_key_KeyCount , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . 0 = value ; } pub mod v0 { # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::v0::IdentityPublicKeyV0`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { pub id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , pub security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , pub contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , pub key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , pub read_only : bool , pub data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , pub disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 > for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { let ffi_ref = & * ffi ; dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . id) , purpose : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . contract_bounds) , key_type : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . key_type) , read_only : ffi_ref . read_only , data : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . data) , disabled_at : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . disabled_at) } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: v0 :: IdentityPublicKeyV0) -> * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment_interfaces :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id : ferment_interfaces :: FFIConversion :: ffi_to (obj . id) , purpose : ferment_interfaces :: FFIConversion :: ffi_to (obj . purpose) , security_level : ferment_interfaces :: FFIConversion :: ffi_to (obj . security_level) , contract_bounds : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . contract_bounds) , key_type : ferment_interfaces :: FFIConversion :: ffi_to (obj . key_type) , read_only : obj . read_only , data : ferment_interfaces :: FFIConversion :: ffi_to (obj . data) , disabled_at : ferment_interfaces :: FFIConversion :: ffi_to_opt (obj . disabled_at) }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . id) ; ; ferment_interfaces :: unbox_any (ffi_ref . purpose) ; ; ferment_interfaces :: unbox_any (ffi_ref . security_level) ; ; if ! ffi_ref . contract_bounds . is_null () { ferment_interfaces :: unbox_any (ffi_ref . contract_bounds) ; } ; ferment_interfaces :: unbox_any (ffi_ref . key_type) ; ; ; ferment_interfaces :: unbox_any (ffi_ref . data) ; ; if ! ffi_ref . disabled_at . is_null () { ferment_interfaces :: unbox_any (ffi_ref . disabled_at) ; } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_ctor (id : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , purpose : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose , security_level : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel , contract_bounds : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds , key_type : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType , read_only : bool , data : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData , disabled_at : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) -> * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { ferment_interfaces :: boxed (dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 { id , purpose , security_level , contract_bounds , key_type , read_only , data , disabled_at }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_destroy (ffi : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_id (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID { (* obj) . id } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_purpose (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose { (* obj) . purpose } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_security_level (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel { (* obj) . security_level } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_contract_bounds (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds { (* obj) . contract_bounds } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_key_type (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType { (* obj) . key_type } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_read_only (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> bool { (* obj) . read_only } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_data (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData { (* obj) . data } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_get_disabled_at (obj : * const dpp_identity_identity_public_key_v0_IdentityPublicKeyV0) -> * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis { (* obj) . disabled_at } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_id (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID) { (* obj) . id = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_purpose (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: purpose :: dpp_identity_identity_public_key_purpose_Purpose) { (* obj) . purpose = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_security_level (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: security_level :: dpp_identity_identity_public_key_security_level_SecurityLevel) { (* obj) . security_level = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_contract_bounds (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: contract_bounds :: dpp_identity_identity_public_key_contract_bounds_ContractBounds) { (* obj) . contract_bounds = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_key_type (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: key_type :: dpp_identity_identity_public_key_key_type_KeyType) { (* obj) . key_type = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_read_only (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : bool) { (* obj) . read_only = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_data (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: platform_value :: types :: binary_data :: platform_value_types_binary_data_BinaryData) { (* obj) . data = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_v0_IdentityPublicKeyV0_set_disabled_at (obj : * mut dpp_identity_identity_public_key_v0_IdentityPublicKeyV0 , value : * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_TimestampMillis) { (* obj) . disabled_at = value ; } } pub mod key_type { # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`dpp::identity::identity_public_key::key_type::KeyType`]\"`]"] # [repr (C)] # [derive (Clone)] pub enum dpp_identity_identity_public_key_key_type_KeyType { ECDSA_SECP256K1 = 0 , BLS12_381 = 1 , ECDSA_HASH160 = 2 , BIP13_SCRIPT_HASH = 3 , EDDSA_25519_HASH160 = 4 } impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: key_type :: KeyType > for dpp_identity_identity_public_key_key_type_KeyType { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_key_type_KeyType) -> dpp :: identity :: identity_public_key :: key_type :: KeyType { let ffi_ref = & * ffi ; match ffi_ref { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 } } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: key_type :: KeyType) -> * const dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (match obj { dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_SECP256K1 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BLS12_381 => dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: ECDSA_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 , dpp :: identity :: identity_public_key :: key_type :: KeyType :: BIP13_SCRIPT_HASH => dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH , dpp :: identity :: identity_public_key :: key_type :: KeyType :: EDDSA_25519_HASH160 => dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 }) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_key_type_KeyType) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for dpp_identity_identity_public_key_key_type_KeyType { fn drop (& mut self) { unsafe { match self { dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381 => { } , dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160 => { } , dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH => { } , dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160 => { } } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_SECP256K1_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_SECP256K1) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BLS12_381_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BLS12_381) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_ECDSA_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: ECDSA_HASH160) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_BIP13_SCRIPT_HASH_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: BIP13_SCRIPT_HASH) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_EDDSA_25519_HASH160_ctor () -> * mut dpp_identity_identity_public_key_key_type_KeyType { ferment_interfaces :: boxed (dpp_identity_identity_public_key_key_type_KeyType :: EDDSA_25519_HASH160) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_key_type_KeyType_destroy (ffi : * mut dpp_identity_identity_public_key_key_type_KeyType) { ferment_interfaces :: unbox_any (ffi) ; } } # [doc = "FFI-representation of the [`dpp::identity::identity_public_key::TimestampMillis`]"] # [repr (C)] # [derive (Clone)] pub struct dpp_identity_identity_public_key_TimestampMillis (u64) ; impl ferment_interfaces :: FFIConversion < dpp :: identity :: identity_public_key :: TimestampMillis > for dpp_identity_identity_public_key_TimestampMillis { unsafe fn ffi_from_const (ffi : * const dpp_identity_identity_public_key_TimestampMillis) -> dpp :: identity :: identity_public_key :: TimestampMillis { let ffi_ref = & * ffi ; ffi_ref . 0 } unsafe fn ffi_to_const (obj : dpp :: identity :: identity_public_key :: TimestampMillis) -> * const dpp_identity_identity_public_key_TimestampMillis { ferment_interfaces :: boxed (dpp_identity_identity_public_key_TimestampMillis (obj)) } unsafe fn destroy (ffi : * mut dpp_identity_identity_public_key_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for dpp_identity_identity_public_key_TimestampMillis { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_ctor (o_0 : u64) -> * mut dpp_identity_identity_public_key_TimestampMillis { ferment_interfaces :: boxed (dpp_identity_identity_public_key_TimestampMillis (o_0)) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_destroy (ffi : * mut dpp_identity_identity_public_key_TimestampMillis) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_get_0 (obj : * const dpp_identity_identity_public_key_TimestampMillis) -> u64 { (* obj) . 0 } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn dpp_identity_identity_public_key_TimestampMillis_set_0 (obj : * mut dpp_identity_identity_public_key_TimestampMillis , value : u64) { (* obj) . 0 = value ; } } } } pub mod rs_dapi_client { } pub mod rs_sdk_bindings { use crate as rs_sdk_bindings ; } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod generics { # [repr (C)] # [derive (Clone)] pub struct Result_ok_dpp_identity_identity_Identity_err_String { pub ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , pub error : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < Result < dpp :: identity :: identity :: Identity , String > > for Result_ok_dpp_identity_identity_Identity_err_String { unsafe fn ffi_from_const (ffi : * const Result_ok_dpp_identity_identity_Identity_err_String) -> Result < dpp :: identity :: identity :: Identity , String > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_result (ffi_ref . ok , ffi_ref . error , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : Result < dpp :: identity :: identity :: Identity , String >) -> * const Result_ok_dpp_identity_identity_Identity_err_String { let (ok , error) = match obj { Ok (o) => (ferment_interfaces :: FFIConversion :: ffi_to (o) , std :: ptr :: null_mut ()) , Err (o) => (std :: ptr :: null_mut () , ferment_interfaces :: FFIConversion :: ffi_to (o)) } ; ferment_interfaces :: boxed (Self { ok , error }) } unsafe fn destroy (ffi : * mut Result_ok_dpp_identity_identity_Identity_err_String) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for Result_ok_dpp_identity_identity_Identity_err_String { fn drop (& mut self) { unsafe { if ! self . ok . is_null () { ferment_interfaces :: unbox_any (self . ok) ; } if ! self . error . is_null () { ferment_interfaces :: unbox_any (self . error) ; } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_identity_identity_Identity_err_String_ctor (ok : * mut crate :: fermented :: types :: dpp :: identity :: identity :: dpp_identity_identity_Identity , error : * mut std :: os :: raw :: c_char) -> * mut Result_ok_dpp_identity_identity_Identity_err_String { ferment_interfaces :: boxed (Result_ok_dpp_identity_identity_Identity_err_String { ok , error }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Result_ok_dpp_identity_identity_Identity_err_String_destroy (ffi : * mut Result_ok_dpp_identity_identity_Identity_err_String) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_u8 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment_interfaces :: boxed (Vec_u8 { count , values }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { pub count : usize , pub keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , pub values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey } impl ferment_interfaces :: FFIConversion < std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > > for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) -> std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey > { let ffi_ref = & * ffi ; ferment_interfaces :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | ferment_interfaces :: FFIConversion :: ffi_from (o) , | o | ferment_interfaces :: FFIConversion :: ffi_from (o)) } unsafe fn ffi_to_const (obj : std :: collections :: BTreeMap < dpp :: identity :: identity_public_key :: KeyID , dpp :: identity :: identity_public_key :: IdentityPublicKey >) -> * const std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (Self { count : obj . len () , keys : ferment_interfaces :: to_complex_vec (obj . keys () . cloned ()) , values : ferment_interfaces :: to_complex_vec (obj . values () . cloned ()) }) } unsafe fn destroy (ffi : * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_any_vec_ptr (self . keys , self . count) ; ferment_interfaces :: unbox_any_vec_ptr (self . values , self . count) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_ctor (count : usize , keys : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_KeyID , values : * mut * mut crate :: fermented :: types :: dpp :: identity :: identity_public_key :: dpp_identity_identity_public_key_IdentityPublicKey) -> * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { ferment_interfaces :: boxed (std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey { count , keys , values }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey_destroy (ffi : * mut std_collections_Map_keys_dpp_identity_identity_public_key_KeyID_values_dpp_identity_identity_public_key_IdentityPublicKey) { ferment_interfaces :: unbox_any (ffi) ; } }